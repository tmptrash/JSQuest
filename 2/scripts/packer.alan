#
# Array of encrypted keywords. It will be decrypted into another array of strings
#
set KEYWORDS, [ '\x15\x67\x02\x63\x08',  '\x14\x75\x06\x63',  '\x14\x7b\x15\x61\x08\x66\x13\x76',  '\x13\x76\x10\x71\x04\x68\x1c',  '\x13\x76\x1a\x7f\x0b\x6e\x4e',  '\x13\x7c',  '\x12\x7e\x0d\x68',  '\x11\x7e\x0c',  '\x11\x64\x0a\x69\x1d\x74\x1b\x75',  '\x1e\x78',  '\x57\x3e\x50\x70',  '\x19\x7c\x0b',  '\x05\x60\x14\x61\x13\x7d',  '\x04\x73\x1a\x6e\x0d\x65',  '\x03\x6b\x02\x71',  '\x03\x7a\x0a\x6f\x00\x66',  '\x00\x68\x01\x6d\x08',  '\x00\x69\x1d\x75',  '\x11\x70\x1c\x6f\x0a',  '\x03\x71\x04\x61',  '\x1e\x70\x03\x77\x16\x78\x1b\x7e\x31\x57',  '\x19\x6c\x00\x6c',  '\x03\x71\x04\x61',  '\x02\x6c\x08\x6d\x0b\x62\x0c\x69\x0d',  '\x1f\x7e\x0d\x42\x35\x5b\x0b\x79\x16\x66\x03\x71\x05\x7c',  '\x38\x5a\x30\x55\x36\x42',  '\x35\x5a\x35\x59\x3c\x5d\x33',  '\x39\x4c\x21\x43\x26\x54',  '\x31\x44\x2a\x49\x3d\x54\x3b\x55',  '\x16\x7a\x1f\x6d\x19',  '\x16\x64\x03\x76\x1b\x7e\x10\x64\x17',  '\x36\x44\x36\x57\x2e',  '\x14\x75\x19\x75\x10\x75',  '\x14\x75\x19\x75\x10\x62',  '\x14\x78\x1d\x7c\x0e\x47\x29\x5d\x38\x4a\x3c\x5d\x31',  '\x14\x78\x1d\x7c\x0e\x5a\x33\x5e\x3b\x54\x21\x55',  '\x14\x7b\x15\x73\x1a\x68\x05',  '\x14\x7b\x15\x66\x12\x60\x15\x76\x02\x6d\x1f',  '\x33\x52\x26\x43',  '\x13\x7c\x1f\x6a\x07\x62\x0c\x78',  '\x12\x64\x05\x69',  '\x3e\x50\x36\x5f\x31\x58\x2c\x55',  '\x1e\x6d\x2b\x42\x2c\x45\x31\x54',  '\x1e\x6d\x23\x42\x2c',  '\x1b\x7e\x10\x77\x03\x6b',  '\x3a\x5b\x2f\x47',  '\x39\x58\x16',  '\x07\x66\x14\x67\x02\x44\x28\x47\x26\x52',  '\x07\x66\x14\x67\x02\x4b\x25\x51',  '\x07\x75\x1a\x77\x07\x73',  '\x07\x75\x1a\x6e\x01\x75\x0c\x7c\x19',  '\x25\x40\x27\x62\x1a\x6a',  '\x04\x61\x15\x5c\x32\x46\x23\x51\x27\x46\x2a',  '\x04\x61\x15\x41\x28\x45\x20\x4f\x3a\x4e',  '\x03\x6c\x3f\x4b\x39\x50\x3e\x59',  '\x01\x60\x0c\x79\x1c\x53\x35',  '\x00\x69\x07\x63\x0c\x7b',  '\x07\x66\x14\x71\x1f\x6b',  '\x04\x71\x01\x64\x16',  '\x14\x75\x19\x75',  '\x16\x66\x16\x7a\x03',  '\x03\x71\x08',  '\x14\x75\x01\x62\x0a',  '\x03\x6b\x19\x76\x01',  '\x1e\x6d\x3e\x4a\x38\x51\x3f\x58',  '\x1e\x6d\x22\x40\x2a\x4f\x2c\x58',  '\x1e\x6d\x2b\x5e\x30\x53\x27\x4e\x21\x4f',  '\x1e\x6d\x2c\x5e\x2c\x4d\x34',  '\x1e\x6d\x23\x56\x3b\x59\x3c\x4e',  '\x1e\x6d\x2f\x40\x2f\x43\x26\x47\x29',  '\x03\x71\x18\x75',  '\x12\x6a\x0f\x6c',  '\x03\x66\x15\x61',  '\x11\x78\x14\x71',  '\x11\x7e\x12\x76\x13\x61',  '\x10\x75\x01',  '\x04\x61\x15',  '\x14\x75\x1b',  '\x34\x58\x39\x4a\x39',  '\x04\x74\x18\x71\x05',  '\x1d\x72\x1b\x75',  '\x04\x76\x15\x51\x30\x44\x25',  '\x04\x68\x01\x62\x07',  '\x04\x74\x18\x71\x12\x77',  '\x4a\x77\x4a',  '\x56\x6b\x56',  '\x4a\x77',  '\x56\x6b',  '\x5a\x77',  '\x24\x50\x22\x4b\x25\x42',  '\x07\x72\x01\x69',  '\x05\x60\x10\x7c\x1d\x7e\x1b' ]
set SOURCE_FILE, 'data.bin'                         # File name with encrypted and packed content
set DESTINATION_FILE, 'script.js'                   # File name for saving result (decrypted and unpacked)
set START_KEY, 119                                  # Start key for XOR encryption and decryption
set CHAR_LIMIT, 127                                 # ASCII character index, that fallows after last usable symbol in javascript code, see character table
set OK_MSG, 'done'                                  # Ok message


#
# -[ Step 1 ]-
# This peace of code decrypts array of keywords and stores it decodedKeywords variable.
# Encryption is a simple XOR based algorithm. It decrypts string of characters into another string using
# start key number and XOR operation. It uses previous symbol XOR with next one to produce decrypted symbol.
# Decrypted array of strings will be stored in decodedKeywords variable.
# Example:
#     Input string  : 'Г▓А'
#     Decryption key: 179
#
#     1. Input string will be converted into sequence: [131, 178, 128], where numbers are ASCII codes of symbols.
#     2. Decrypt first symbol : 179 xor 131 = 48
#     3. Decrypt second symbol: 131 xor 178 = 49
#     4. Decrypt third symbol : 178 xor 128 = 50
#     Result [48, 49, 50] or '012' - decrypted string
#

set decodedKeywords, []                             # It will contain array of decrypted strings          
set keyword, ''                                     # Current keyword from keywords array
set keywordLen, 0                                   # Lengths of one and all keywords
set keywordsLen, 0
set i, 0                                            # Indexes for loops
set j, 0
set ch, ''                                          # Current and previous characters
set prevCh, ''
set n, 0                                            # Current character ASCII index
len KEYWORDS, keywordsLen                           # Length of keywords array should be: it's length - 1
dec keywordsLen

:DECKEYWORDSTART                                    # Loop throught every encrypted keyword
    cut    KEYWORDS, i, keyword                     # get one encrypted keyword and stores it in keyword variable

    set    j, 0
    set    prevCh, START_KEY
    len    keyword, keywordLen
    dec    keywordLen
    set    decStr, ''
    :DECSTART                                       # Here we go through all symbols in current keyword and decrypt it
        cut    keyword, j, ch
        asc    ch, ch
        xor    ch, prevCh, n
        set    prevCh, ch
        char   n, ch
        append decStr, ch

        inc    j
        gotog  j, keywordLen, DECEND
        goto   DECSTART
    :DECEND
    append decodedKeywords, decStr

    inc    i
    gotog  i, keywordsLen, DECKEYWORDEND
    goto   DECKEYWORDSTART
:DECKEYWORDEND


#
# -[ Step 2 ]-
# This peace of code decrypts script file using start key and xor operator. Decryption algorithm is similat to
# one, described at the top of this file. Decrypted file content will be stored in data variable.
#
set  data, ''
read SOURCE_FILE, data                              # reads source file content into data variable
set  j, 0
set  prevCh, START_KEY
len  data, keywordLen
dec  keywordLen
set  decStr, ''

:DECFILESTART
    cut    data, j, ch
    asc    ch, ch
    xor    ch, prevCh, n
    set    prevCh, ch
    char   n,  ch
    append decStr, ch

    inc    j
    gotog  j, keywordLen, DECFILEEND
    goto   DECFILESTART
:DECFILEEND
set data, decStr


#
# -[ Step 3 ]-
# This peace of script unpacks decrypted script using keywords replacement. It replaces
# characters with index > CHAR_LIMIT by keywords with similar index from KEYWORDS constant
#
set i, 0
set ch, ''
set decStr, ''
set n, 0
set empty, ''
set dataLen, 0

set chLimit, CHAR_LIMIT                             # We use gotog, so character limit should be limit - 1
dec chLimit
len data, dataLen                                   # data.length - 1
dec dataLen

:LOOP
    cut    data, i, ch                              # Reads one symbol from decrypted file
    asc    ch, n                                    # If it is replace symbol, go to the sub routine. If not, continue loop
    gotog  n, chLimit, REPLACE
    goto   CLOOP
	
	:REPLACE                                        # Adds string with keyword into result string and continue loop
		sub    n, CHAR_LIMIT
		cut    decodedKeywords, n, ch
		append decStr, ch
		set    ch, empty

	:CLOOP
		append decStr, ch                           # Append current symbol to result string
		inc    i
		gotog  i, dataLen, END
		goto   LOOP
:END


write decStr, DESTINATION_FILE                      # Creates final output decrypted and unpacked script file
echo OK_MSG