#
# Array of encrypted keywords. It will be decrypted into another array of strings
#
set KEYWORDS, ['\xd1\xa3\xc6\xa7\xcc','\xd0\xb1\xc2\xa7\x87','\xd0\xbf\xd1\xa5\xcc\xa2\xd7\xb2','\xd7\xb2\xd4\xb5\xc0\xac\xd8','\xd7\xb2\xde\xbb\xcf\xaa\x8a','\xd7\xb8','\xd6\xba\xc9\xac','\xd5\xba\xc8','\xd5\xa0\xce\xad\xd9\xb0\xdf\xb1','\xda\xbc','\x93\xfa\x94\xb4','\xdd\xb8\xcf\xef','\xc1\xa4\xd0\xa5\xd7\xb9','\xc0\xb7\xde\xaa\xc9\xa1','\xc7\xaf\xc6\xb5\x9b','\xc7\xaf\xc6\xb5','\xc7\xbe\xce\xab\xc4\xa2\x82','\xc7\xbe\xce\xab\xc4\xa2','\xc5\xa4\xd6\xf6','\xc4\xac\xc5\xa9\xcc','\xc4\xad\xd9\xb1','\xd5\xb4\xd8\xab\xce','\xc7\xb5\xc0\xa5','\xda\xb4\xc7\xb3\xd2\xbc\xdf\xba\xf5\x93\xb3','\xdd\xa8\xc4\xa8','\xc7\xb5\xc0\xa5','\xc6\xa8\xcc\xa9\xcf\xa6\xc8\xad\xc9','\xdb\xba\xc9\x86\xf1\x9f\xcf\xbd\xd2\xa2\xc7\xb5\xc1\xb8','\xfc\x9e\xf4\x91\xf2\x86','\xf1\x9e\xf1\x9d\xf8\x99\xf7','\xfd\x88\xe5\x87\xe2\x90','\xf5\x80\xee\x8d\xf9\x90\xff\x91','\xd2\xbe\xdb\xa9\xdd','\xd2\xa0\xc7\xb2\xdf\xba\xd4\xa0\xd3','\xf2\x80\xf2\x93\xea','\xd0\xb1\xdd\xb1\xd4\xb1','\xd0\xb1\xdd\xb1\xd4\xa6','\xd0\xbc\xd9\xb8\xca\x83\xed\x99\xfc\x8e\xf8\x99\xf5','\xd0\xbc\xd9\xb8\xca\x9e\xf7\x9a\xff\x90\xe5\x91','\xd0\xbf\xd1\xb7\xde\xac\xc1','\xd0\xbf\xd1\xa2\xd6\xa4\xd1\xb2\xc6\xa9\xdb','\xf7\x96\xe2\x87','\xd7\xb8\xdb\xae\xc3\xa6\xc8\xbc','\xd6\xa0\xc1\xad','\xfa\x94\xf2\x9b\xf5\x9c\xe8\x91','\xda\xa9\xef\x86\xe8\x81\xf5\x90','\xda\xa9\xe7\x86\xe8','\xdf\xba\xd4\xb3\xc7\xaf','\xfe\x9f\xeb\x83','\xfd\x9c\xd2','\xc3\xa2\xd0\xa3\xc6\x80\xec\x83\xe2\x96','\xc3\xa2\xd0\xa3\xc6\x8f\xe1\x95','\xc3\xb1\xde\xb3\xc3\xb7','\xc3\xb1\xde\xaa\xc5\xb1\xc8\xb8\xdd','\xe1\x84\xe3\xa6\xde\xae','\xc0\xa5\xd1\x98\xf6\x82\xe7\x95\xe3\x82\xee','\xc0\xa5\xd1\x85\xec\x81\xe4\x8b\xfe\x8a','\xc7\xa8\xfb\x8f\xfd\x94\xfa\x9d','\xc5\xa4\xc8\xbd\xd8\x97\xf1','\xc4\xad\xc3\xa7\xc8\xbf','\xc3\xa2\xd0\xb5\xdb\xaf','\xc0\xb5\xc5\xa0\xd2','\xd0\xb1\xdd\xb1','\xd2\xa2\xd2\xbe\xc7','\xc7\xb5\xcc','\xd0\xb1\xc5\xa6\xce','\xc7\xaf\xdd\xb2\xc5','\xda\xa9\xfa\x8e\xfc\x95\xfb\x9c','\xda\xa9\xe6\x84\xee\x8b\xe8\x9c','\xda\xa9\xef\x9a\xf4\x97\xe3\x8a\xe5\x8b','\xda\xa9\xe8\x9a\xe8\x89\xf0','\xda\xa9\xe7\x92\xff\x9d\xf8\x8a','\xda\xa9\xeb\x84\xeb\x87\xe2\x83\xed','\xc7\xb5\xdc\xb1','\xd6\xae\xcb\xa8','\xc7\xa2\xd1\xa5','\xd5\xbc\xd0\xb5','\xd5\xba\xd6\xb2\xd7\xa5','\xd4\xb1\xc5','\xc0\xa5\xd1','\xd0\xb1\xdf','\xf0\x9c\xfd\x8e\xfd','\xc0\xb0\xdc\xb5\xc1','\xd9\xb6\xdf\xb1','\xd7\xb6\xc2\xa3','\xc0\xac\xc5\xa6\xc3','\xc0\xb0\xdc\xb5\xd6\xb3','\x8e\xb3\x8e','\x92\xaf\x92','\x8e\xb3','\x92\xaf','\xe8\xb5','\xc8\xb5','\xcf\xb3','\x95\xb3','\xda\xa9','\x91\xb3','\x9b\xb2','\x98\xb3','\x9e\xb3']
#
# This is constants section. Here you can set main constants of the script
#
set DESTINATION_FILE, 'result.dump'
#
# Start key for XOR encryption and decryption
#
set START_KEY, 119

#
# -[ Step 1 ]-
# This peace of code decrypts array of keywords and stores it decodedKeywords variable.
# Encryption is a simple XOR based algorithm. It decrypts string of characters into another string using
# start key number and XOR operation. It uses previous symbol XOR with next one to produce decrypted symbol.
# Example:
#     Input string  : 'Г▓А'
#     Decryption key: 179
#
#     1. Input string will be converted into sequence: [131, 178, 128], where numbers are ASCII codes of symbols.
#     2. Decrypt first symbol : 179 xor 131 = 48
#     3. Decrypt second symbol: 131 xor 178 = 49
#     4. Decrypt third symbol : 178 xor 128 = 50
#     Result [48, 49, 50] or '012' - decrypted string
#

#
# It will contain array of decrypted strings
#
set decodedKeywords, []
#
# Current keyword from keywords array
#
set keyword, ''
#
# Lengths of one and all keywords
#
set keywordLen, 0
set keywordsLen, 0
#
# Indexes for loops
#
set i, 0
set j, 0
#
# Current and previous characters
#
set ch, ''
set prevCh, ''
#
# Current character ASCII index
#
set n, 0

#
# Length of source array should be: it's length - 1
#
len KEYWORDS, keywordsLen
dec keywordsLen

:DECKEYWORDSTART
    cut    KEYWORDS, i, keyword

    set    j, 0
    set    prevCh, START_KEY
    len    keyword, keywordLen
    dec    keywordLen
    set    decStr, ''
    :DECSTART
        cut    keyword, j, ch
        asc    ch, ch
        xor    ch, prevCh, n
        set    prevCh, ch
        char   n, ch
        append decStr, ch

        inc    j
        gotog  j, keywordLen, DECEND
        goto   DECSTART
    :DECEND
    append decodedKeywords, decStr

    inc    i
    gotog  i, keywordsLen, DECKEYWORDEND
    goto   DECKEYWORDSTART
:DECKEYWORDEND
# Here we have decodedKeywords variable with decrypted array of strings (keywords)


#
# -[ Step 2 ]-
# This peace of code decrypts script file using start key and xor operator. Decryption algorithm is similat to
# one, described at the top of this file. It gets 
#
set  data, ''
read DESTINATION_FILE, data

set  j, 0
set  prevCh, START_KEY
len  data, keywordLen
dec  keywordLen
set  decStr, ''
:DECFILESTART
    cut    data, j, ch
    asc    ch, ch
    xor    ch, prevCh, n
    set    prevCh, ch
    char   n,  ch
    append decStr, ch

    inc    j
    gotog  j, keywordLen, DECFILEEND
    goto   DECFILESTART
:DECFILEEND
set data, decStr
# Here we have decrypted data in data variable
echo data
goto end

#
# Encrypted keywords array
#
set i,         0
set ch,        ''
set res,       ''
set chlim,     126
set n,         0
set empty,     ''
set file4read, 'file'
set file4save, 'result'
set file,      ''

#
# Reads the file into variable and starts file content reading loop
#
read file4read, file
:loop
    #
    # Reads one symbol from file string
    #
    cut    file, i, ch
    asc    ch, n
    #
    # If it is replace symbol, go to the sub routine. If not, continue loop
    #
    gotog  ch, chlim, replace
    goto   cloop

    #
    # Adds string with keyword into result string and continue loop
    #
:replace
    sub    n, chlim
    cut    decodedKeywords, n, ch
    append res, ch
    set    ch, empty

:cloop
    #
    # Append current symbol to result string
    #
    append res, ch
    inc    i
goto loop

:endloop
save file4save, res

:end