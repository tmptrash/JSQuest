#
# Simple XOR based algorithm. It encrypts string of characters into another string using
# start key number and xor operation. It uses previous symbol XOR next one to produce encrypted symbol.
# Example:
#     Input string  : '012'
#     Encryption key: 179
#
#     1. Input string will be converted into sequence: [48, 49, 50], where numbers are ASCII codes of symbols.
#     2. Encrypt first symbol : 179 xor 48 = 131
#     3. Encrypt second symbol: 131 xor 49 = 178
#     4. Encrypt third symbol : 178 xor 50 = 128
#     Result [131, 178, 128] or 'Г▓А' - encrypted string
#
set  src,      ['break','case ','continue','default','delete ','do','else','for','function','if',' in ','new ','return','switch','this.','this','typeof ','typeof','var ','while','with','false','true','instanceOf ','null','true','undefined','hasOwnProperty','Object','Boolean','Number','Function','alert','arguments','Array','callee','caller','clearInterval','clearTimeout','confirm','constructor','Date','document','eval','Infinity','isFinite','isNan', 'length','Math','NaN','parseFloat','parseInt','prompt','prototype','RegExp','setInterval','setTimeout','toString','valueOf','window','parent','super','call','apply','try','catch','throw','isString','isObject','isFunction','isArray','isNumber','isBoolean','trim','exec','test','file','folder','get','set','can','Class','split','join','data','slice','splice','===','!==','==','!=','[]','{}','||','&&','is','""','()','++','--']
set  dst,      []
set  srcLen,   0
set  encLen,   0
set  i,        0
set  k,        0
set  ch,       ''
set  keyword,  ''
set  prevCh,   ''
set  sep,      '-'
set  n,        0
set  hex,      ''

#
# Calculates length of source array - 1
#
len  src,      srcLen
dec  srcLen

:KEYWORDSTART
    cut    src, i, keyword

    set    k, 0
    set    prevCh, 179
    len    keyword, encLen
    dec    encLen
    set    encStr, ''
    :ENCSTART
        cut    keyword, k, ch
        asc    ch, ch
        xor    ch, prevCh, n
        set    ch, '\x'
        hex    n,  hex
        append ch, hex
        append encStr, ch

        set    prevCh, n
        inc    k
        gotog  k, encLen, ENCEND
        goto   ENCSTART
    :ENCEND
    append dst, encStr

    inc    i
    gotog  i, srcLen, KEYWORDEND
    goto   KEYWORDSTART

:KEYWORDEND
echo dst